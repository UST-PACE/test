image:
  repository: "otel/opentelemetry-collector-contrib"

mode: daemonset

presets:
  logsCollection:
    enabled: true
    includeCollectorLogs: true

# do not merge this with your metrics configuration!
config:
  extensions:
    basicauth/grafana_cloud:
      client_auth: 
        username: ${env:GF_CLOUD_OTLP_USERNAME}
        password: ${env:GF_CLOUD_OTLP_PASSWORD}
  receivers:
    filelog:
      include:
        - /var/log/pods/*/*/*.log
      start_at: beginning
      include_file_path: true
      include_file_name: false
      operators:
        # Find out which format is used by kubernetes
        - type: router
          id: get-format
          routes:
            - output: parser-docker
              expr: 'body matches "^\\{"'
            - output: parser-crio
              expr: 'body matches "^[^ Z]+ "'
            - output: parser-containerd
              expr: 'body matches "^[^ Z]+Z"'
        # Parse CRI-O format
        - type: regex_parser
          id: parser-crio
          regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout_type: gotime
            layout: '2006-01-02T15:04:05.999999999Z07:00'
        # Parse CRI-Containerd format
        - type: regex_parser
          id: parser-containerd
          regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$'
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        # Parse Docker format
        - type: json_parser
          id: parser-docker
          output: extract_metadata_from_filepath
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        # Extract metadata from file path
        - type: regex_parser
          id: extract_metadata_from_filepath
          # Pod UID is not always 36 characters long
          regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{16,36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
          parse_from: attributes["log.file.path"]
          cache:
            size: 128 # default maximum amount of Pods per Node is 110
        # Rename attributes
        - type: move
          from: attributes["log.file.path"]
          to: resource["filename"]
        - type: move
          from: attributes.container_name
          to: resource["container"]
        - type: move
          from: attributes.namespace
          to: resource["namespace"]
        - type: move
          from: attributes.pod_name
          to: resource["pod"]
        - type: add
          field: resource["cluster"]
          value: 'k3s-siva' # Set your cluster name here
        - type: move
          from: attributes.log
          to: body

  processors:
    resource:
      attributes:
        - action: insert
          key: loki.format
          value: raw
        - action: insert
          key: loki.resource.labels
          value: pod, namespace, container, cluster, filename
  exporters:
   

    otlphttp/grafana_cloud:
      endpoint: https://otlp-gateway-prod-ap-south-1.grafana.net/otlp
      auth:
        authenticator: basicauth/grafana_cloud
  service:
    extensions: [health_check, basicauth/grafana_cloud]
    pipelines:
      logs:
        receivers: [filelog]
        processors: [resource]
        exporters: [otlphttp/grafana_cloud]
      metrics: {}
      traces: {}
extraEnvs:
  - name: CLUSTER_NAME
    value: k3s-cluster
  - name: GF_CLOUD_OTLP_USERNAME
    valueFrom:
      secretKeyRef:
        name: otel-collector-creds
        key: GF_CLOUD_OTLP_USERNAME
  - name: GF_CLOUD_OTLP_PASSWORD
    valueFrom:
      secretKeyRef:
        name: otel-collector-creds
        key: GF_CLOUD_OTLP_PASSWORD

resources:
  limits:
    cpu: 300m
    memory: 512Mi
  requests:
    cpu: 50m
    memory: 50Mi
